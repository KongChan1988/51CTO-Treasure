
程序名称：文件上传下载系统
作者：nb

1 博客地址
http://www.cnblogs.com......

2 需求
（1）用select()实现FTP的上传下载功能
（2）满足多个客户端同时上传或下载（并发）

需求仔细分析：
客户端上传文件：由于客户端不断send数据，每send一次，服务端就会select一次，然后recv一次。客户端第一次send的肯定是put filename这样的命令，
                准确说是一个包含命令、文件名、文件大小等信息的字典；接着等待服务端响应说可以传文件后，客户端开始不断send文件的数据。这里
                仍然是客户端send一次data，服务端select一次后，recv一次data。如果每次都把data放入队列queue，当要处理data时，从队列queue中
                取出一个数据后，得判断data是命令还是文件内容。
                第一次这样处理：取出一个data，是命令则记录，不是命令则找出原先记录的命令信息，打开文件，追加写入这次取出的data，关闭文件。
                                下一次取出data时，再去找记录的信息，打开文件，追加写入，关闭文件。这样做虽然也能实现并发，但是每处理一个
                                data都得打开、关闭一次文件，效率低。
                最后这样处理的：每recv一次data就判断data，如果是命令放入queue1，反之放入queue2；处理data时，启一个线程，取出queue1里的命
                                令，再从对应的queue2中不断取出数据，写入，直到完毕。

客户端下载文件：下载文件时客户端只需给服务端发送一条命令，接着服务端处理后回复客户端你准备接收文件，然后服务端不断send数据data给客户端，
                服务端在send数据data时，由于是非阻塞状态，可能出现BlockingIOError，所以需要try然后send数据data，如果出现BlockingIOError，
                说明这行data没有发送成功，指针需要回到这行data的行首位置，然后继续send这行data，直到结束。这里我仍然是在服务端启一个线
                程来处理的。

总的来说：1.只用select的话，也能处理多并发，效率比较低，速度很慢（感觉是自己写得复杂了）；
          2.通过select  + 多线程的方法实现并发，速度快多了。
          3.一些个人理解：对于IO密集型：本来CPU性能就特别好，速度光速快，再加上IO操作密集（io不占用CPU），CPU的事就更少。所以程序慢的原因
                          通常都是CPU在等待io的完成，如果不等待，CPU做事是特别快的。这样的话，多核和单核速度应该相差不大，毕竟IO慢才是主
                          要原因。所以，对于IO操作密集型，我在这里用了多线程，每一个线程进入IO等待时，CPU可以处理那些没进入IO操作的线程，
                          充分利用CPU的性能。如果所有线程都进入IO，这时CPU才开始等待，一旦有IO处理完的线程，CPU又可以工作了。

                          对于CPU密集型：假设是科学计算。这个时候CPU要不断运算，事情特别多，CPU虽然很牛逼，做事快，也忙不过来。这个时候多核
                          的性能肯定比单核好，因为CPU可以把事情分给别的CPU，大家共同来完成。

                          关键点：io不占用CPU。


3 流程图
见day10/目录下的两个.png文件

4 程序测试
4.1 测试环境：
操作系统：win10；      python解释器版本：Python3.5.2

4.2 测试步骤：
（1）启动服务端  ：运行Server/bin/下的  SelectFtp.py
（2）启动客户端1  ：运行Client/bin/下的  SelectClient.py
（3）启动客户端2：重复步骤（2）即可
（4）上传：
        1.将需要上传的文件 test1.avi、test2.avi 拷贝到Client/bin目录下
        2.在客户端1中输入命令：put test1.avi ,在客户端2中输入命令put test2.avi，尽量同时执行（按回车即可执行）
        3.等待上传完成后，查看Server/bin目录下已有有测试文件test1.avi 、test2.avi
（5）下载：
        1.下载前确保Server/bin目录下有测试文件test1.avi 、test2.avi（如已经执行步骤（4），该目录下已有文件）
        2.删除Client/bin目录下的 test1.avi 、test2.avi
        3.客户端1、2中分别输入命令:get test1.avi  、 get test2.avi,尽量同时执行
        4.等待下载完成后，查看Client/bin目录下已经有 test1.avi 、test2.avi
（6）测试完成后，关闭程序即可


5  目录结构

5.1 服务端目录结构
Server/
|-- bin/
|   |-- __init__.py
|   |-- SelectClient.py   执行程序
|
|-- core/                 核心代码
|   |-- __init__.py
|   |-- main.py           主程序
|
|-- README

5.2 客户端目录结构
Client/
|-- bin/
|   |-- __init__.py
|   |-- SelectFtp.py     执行程序
|
|-- core/                核心代码
|   |-- __init__.py
|   |-- main.py          主程序
|
|-- README

6 备注信息
    如有问题，联系QQ......

程序名称：文件上传下载系统
作者：nb

1 博客地址
http://www.cnblogs.com......

2 需求
（1）用select()实现FTP的上传下载功能
（2）满足多个客户端同时上传或下载（并发）

需求仔细分析：
客户端上传文件：由于客户端不断send数据，每send一次，服务端就会select一次，然后recv一次。客户端第一次send的肯定是put filename这样的命令，
                准确说是一个包含命令、文件名、文件大小等信息的字典；接着等待服务端响应说可以传文件后，客户端开始不断send文件的数据。这里
                仍然是客户端send一次data，服务端select一次后，recv一次data。如果每次都把data放入队列queue，当要处理data时，从队列queue中
                取出一个数据后，得判断data是命令还是文件内容。
                第一次这样处理：取出一个data，是命令则记录，不是命令则找出原先记录的命令信息，打开文件，追加写入这次取出的data，关闭文件。
                                下一次取出data时，再去找记录的信息，打开文件，追加写入，关闭文件。这样做虽然也能实现并发，但是每处理一个
                                data都得打开、关闭一次文件，效率低。
                最后这样处理的：每recv一次data就判断data，如果是命令放入queue1，反之放入queue2；处理data时，启一个线程，取出queue1里的命
                                令，再从对应的queue2中不断取出数据，写入，直到完毕。

客户端下载文件：下载文件时客户端只需给服务端发送一条命令，接着服务端处理后回复客户端你准备接收文件，然后服务端不断send数据data给客户端，
                服务端在send数据data时，由于是非阻塞状态，可能出现BlockingIOError，所以需要try然后send数据data，如果出现BlockingIOError，
                说明这行data没有发送成功，指针需要回到这行data的行首位置，然后继续send这行data，直到结束。这里我仍然是在服务端启一个线
                程来处理的。

总的来说：1.只用select的话，也能处理多并发，效率比较低，速度很慢（感觉是自己写得复杂了）；
          2.通过select  + 多线程的方法实现并发，速度快多了。
          3.一些个人理解：对于IO密集型：本来CPU性能就特别好，速度光速快，再加上IO操作密集（io不占用CPU），CPU的事就更少。所以程序慢的原因
                          通常都是CPU在等待io的完成，如果不等待，CPU做事是特别快的。这样的话，多核和单核速度应该相差不大，毕竟IO慢才是主
                          要原因。所以，对于IO操作密集型，我在这里用了多线程，每一个线程进入IO等待时，CPU可以处理那些没进入IO操作的线程，
                          充分利用CPU的性能。如果所有线程都进入IO，这时CPU才开始等待，一旦有IO处理完的线程，CPU又可以工作了。

                          对于CPU密集型：假设是科学计算。这个时候CPU要不断运算，事情特别多，CPU虽然很牛逼，做事快，也忙不过来。这个时候多核
                          的性能肯定比单核好，因为CPU可以把事情分给别的CPU，大家共同来完成。

                          关键点：io不占用CPU。


3 流程图
见day10/目录下的两个.png文件

4 程序测试
4.1 测试环境：
操作系统：win10；      python解释器版本：Python3.5.2

4.2 测试步骤：
（1）启动服务端  ：运行Server/bin/下的  SelectFtp.py
（2）启动客户端1  ：运行Client/bin/下的  SelectClient.py
（3）启动客户端2：重复步骤（2）即可
（4）上传：
        1.将需要上传的文件 test1.avi、test2.avi 拷贝到Client/bin目录下
        2.在客户端1中输入命令：put test1.avi ,在客户端2中输入命令put test2.avi，尽量同时执行（按回车即可执行）
        3.等待上传完成后，查看Server/bin目录下已有有测试文件test1.avi 、test2.avi
（5）下载：
        1.下载前确保Server/bin目录下有测试文件test1.avi 、test2.avi（如已经执行步骤（4），该目录下已有文件）
        2.删除Client/bin目录下的 test1.avi 、test2.avi
        3.客户端1、2中分别输入命令:get test1.avi  、 get test2.avi,尽量同时执行
        4.等待下载完成后，查看Client/bin目录下已经有 test1.avi 、test2.avi
（6）测试完成后，关闭程序即可


5  目录结构

5.1 服务端目录结构
Server/
|-- bin/
|   |-- __init__.py
|   |-- SelectClient.py   执行程序
|
|-- core/                 核心代码
|   |-- __init__.py
|   |-- main.py           主程序
|
|-- README

5.2 客户端目录结构
Client/
|-- bin/
|   |-- __init__.py
|   |-- SelectFtp.py     执行程序
|
|-- core/                核心代码
|   |-- __init__.py
|   |-- main.py          主程序
|
|-- README

6 备注信息
    如有问题，联系QQ......


程序名称：文件上传下载系统
作者：nb

1 博客地址
http://www.cnblogs.com......

2 需求
（1）用select()实现FTP的上传下载功能
（2）满足多个客户端同时上传或下载（并发）

需求仔细分析：
客户端上传文件：由于客户端不断send数据，每send一次，服务端就会select一次，然后recv一次。客户端第一次send的肯定是put filename这样的命令，
                准确说是一个包含命令、文件名、文件大小等信息的字典；接着等待服务端响应说可以传文件后，客户端开始不断send文件的数据。这里
                仍然是客户端send一次data，服务端select一次后，recv一次data。如果每次都把data放入队列queue，当要处理data时，从队列queue中
                取出一个数据后，得判断data是命令还是文件内容。
                第一次这样处理：取出一个data，是命令则记录，不是命令则找出原先记录的命令信息，打开文件，追加写入这次取出的data，关闭文件。
                                下一次取出data时，再去找记录的信息，打开文件，追加写入，关闭文件。这样做虽然也能实现并发，但是每处理一个
                                data都得打开、关闭一次文件，效率低。
                最后这样处理的：每recv一次data就判断data，如果是命令放入queue1，反之放入queue2；处理data时，启一个线程，取出queue1里的命
                                令，再从对应的queue2中不断取出数据，写入，直到完毕。

客户端下载文件：下载文件时客户端只需给服务端发送一条命令，接着服务端处理后回复客户端你准备接收文件，然后服务端不断send数据data给客户端，
                服务端在send数据data时，由于是非阻塞状态，可能出现BlockingIOError，所以需要try然后send数据data，如果出现BlockingIOError，
                说明这行data没有发送成功，指针需要回到这行data的行首位置，然后继续send这行data，直到结束。这里我仍然是在服务端启一个线
                程来处理的。

总的来说：1.只用select的话，也能处理多并发，效率比较低，速度很慢（感觉是自己写得复杂了）；
          2.通过select  + 多线程的方法实现并发，速度快多了。
          3.一些个人理解：对于IO密集型：本来CPU性能就特别好，速度光速快，再加上IO操作密集（io不占用CPU），CPU的事就更少。所以程序慢的原因
                          通常都是CPU在等待io的完成，如果不等待，CPU做事是特别快的。这样的话，多核和单核速度应该相差不大，毕竟IO慢才是主
                          要原因。所以，对于IO操作密集型，我在这里用了多线程，每一个线程进入IO等待时，CPU可以处理那些没进入IO操作的线程，
                          充分利用CPU的性能。如果所有线程都进入IO，这时CPU才开始等待，一旦有IO处理完的线程，CPU又可以工作了。

                          对于CPU密集型：假设是科学计算。这个时候CPU要不断运算，事情特别多，CPU虽然很牛逼，做事快，也忙不过来。这个时候多核
                          的性能肯定比单核好，因为CPU可以把事情分给别的CPU，大家共同来完成。

                          关键点：io不占用CPU。


3 流程图
见day10/目录下的两个.png文件

4 程序测试
4.1 测试环境：
操作系统：win10；      python解释器版本：Python3.5.2

4.2 测试步骤：
（1）启动服务端  ：运行Server/bin/下的  SelectFtp.py
（2）启动客户端1  ：运行Client/bin/下的  SelectClient.py
（3）启动客户端2：重复步骤（2）即可
（4）上传：
        1.将需要上传的文件 test1.avi、test2.avi 拷贝到Client/bin目录下
        2.在客户端1中输入命令：put test1.avi ,在客户端2中输入命令put test2.avi，尽量同时执行（按回车即可执行）
        3.等待上传完成后，查看Server/bin目录下已有有测试文件test1.avi 、test2.avi
（5）下载：
        1.下载前确保Server/bin目录下有测试文件test1.avi 、test2.avi（如已经执行步骤（4），该目录下已有文件）
        2.删除Client/bin目录下的 test1.avi 、test2.avi
        3.客户端1、2中分别输入命令:get test1.avi  、 get test2.avi,尽量同时执行
        4.等待下载完成后，查看Client/bin目录下已经有 test1.avi 、test2.avi
（6）测试完成后，关闭程序即可


5  目录结构

5.1 服务端目录结构
Server/
|-- bin/
|   |-- __init__.py
|   |-- SelectClient.py   执行程序
|
|-- core/                 核心代码
|   |-- __init__.py
|   |-- main.py           主程序
|
|-- README

5.2 客户端目录结构
Client/
|-- bin/
|   |-- __init__.py
|   |-- SelectFtp.py     执行程序
|
|-- core/                核心代码
|   |-- __init__.py
|   |-- main.py          主程序
|
|-- README

6 备注信息
    如有问题，联系QQ......


程序名称：文件上传下载系统
作者：nb

1 博客地址
http://www.cnblogs.com......

2 需求
（1）用select()实现FTP的上传下载功能
（2）满足多个客户端同时上传或下载（并发）

需求仔细分析：
客户端上传文件：由于客户端不断send数据，每send一次，服务端就会select一次，然后recv一次。客户端第一次send的肯定是put filename这样的命令，
                准确说是一个包含命令、文件名、文件大小等信息的字典；接着等待服务端响应说可以传文件后，客户端开始不断send文件的数据。这里
                仍然是客户端send一次data，服务端select一次后，recv一次data。如果每次都把data放入队列queue，当要处理data时，从队列queue中
                取出一个数据后，得判断data是命令还是文件内容。
                第一次这样处理：取出一个data，是命令则记录，不是命令则找出原先记录的命令信息，打开文件，追加写入这次取出的data，关闭文件。
                                下一次取出data时，再去找记录的信息，打开文件，追加写入，关闭文件。这样做虽然也能实现并发，但是每处理一个
                                data都得打开、关闭一次文件，效率低。
                最后这样处理的：每recv一次data就判断data，如果是命令放入queue1，反之放入queue2；处理data时，启一个线程，取出queue1里的命
                                令，再从对应的queue2中不断取出数据，写入，直到完毕。

客户端下载文件：下载文件时客户端只需给服务端发送一条命令，接着服务端处理后回复客户端你准备接收文件，然后服务端不断send数据data给客户端，
                服务端在send数据data时，由于是非阻塞状态，可能出现BlockingIOError，所以需要try然后send数据data，如果出现BlockingIOError，
                说明这行data没有发送成功，指针需要回到这行data的行首位置，然后继续send这行data，直到结束。这里我仍然是在服务端启一个线
                程来处理的。

总的来说：1.只用select的话，也能处理多并发，效率比较低，速度很慢（感觉是自己写得复杂了）；
          2.通过select  + 多线程的方法实现并发，速度快多了。
          3.一些个人理解：对于IO密集型：本来CPU性能就特别好，速度光速快，再加上IO操作密集（io不占用CPU），CPU的事就更少。所以程序慢的原因
                          通常都是CPU在等待io的完成，如果不等待，CPU做事是特别快的。这样的话，多核和单核速度应该相差不大，毕竟IO慢才是主
                          要原因。所以，对于IO操作密集型，我在这里用了多线程，每一个线程进入IO等待时，CPU可以处理那些没进入IO操作的线程，
                          充分利用CPU的性能。如果所有线程都进入IO，这时CPU才开始等待，一旦有IO处理完的线程，CPU又可以工作了。

                          对于CPU密集型：假设是科学计算。这个时候CPU要不断运算，事情特别多，CPU虽然很牛逼，做事快，也忙不过来。这个时候多核
                          的性能肯定比单核好，因为CPU可以把事情分给别的CPU，大家共同来完成。

                          关键点：io不占用CPU。


3 流程图
见day10/目录下的两个.png文件

4 程序测试
4.1 测试环境：
操作系统：win10；      python解释器版本：Python3.5.2

4.2 测试步骤：
（1）启动服务端  ：运行Server/bin/下的  SelectFtp.py
（2）启动客户端1  ：运行Client/bin/下的  SelectClient.py
（3）启动客户端2：重复步骤（2）即可
（4）上传：
        1.将需要上传的文件 test1.avi、test2.avi 拷贝到Client/bin目录下
        2.在客户端1中输入命令：put test1.avi ,在客户端2中输入命令put test2.avi，尽量同时执行（按回车即可执行）
        3.等待上传完成后，查看Server/bin目录下已有有测试文件test1.avi 、test2.avi
（5）下载：
        1.下载前确保Server/bin目录下有测试文件test1.avi 、test2.avi（如已经执行步骤（4），该目录下已有文件）
        2.删除Client/bin目录下的 test1.avi 、test2.avi
        3.客户端1、2中分别输入命令:get test1.avi  、 get test2.avi,尽量同时执行
        4.等待下载完成后，查看Client/bin目录下已经有 test1.avi 、test2.avi
（6）测试完成后，关闭程序即可


5  目录结构

5.1 服务端目录结构
Server/
|-- bin/
|   |-- __init__.py
|   |-- SelectClient.py   执行程序
|
|-- core/                 核心代码
|   |-- __init__.py
|   |-- main.py           主程序
|
|-- README

5.2 客户端目录结构
Client/
|-- bin/
|   |-- __init__.py
|   |-- SelectFtp.py     执行程序
|
|-- core/                核心代码
|   |-- __init__.py
|   |-- main.py          主程序
|
|-- README

6 备注信息
    如有问题，联系QQ......


程序名称：文件上传下载系统
作者：nb

1 博客地址
http://www.cnblogs.com......

2 需求
（1）用select()实现FTP的上传下载功能
（2）满足多个客户端同时上传或下载（并发）

需求仔细分析：
客户端上传文件：由于客户端不断send数据，每send一次，服务端就会select一次，然后recv一次。客户端第一次send的肯定是put filename这样的命令，
                准确说是一个包含命令、文件名、文件大小等信息的字典；接着等待服务端响应说可以传文件后，客户端开始不断send文件的数据。这里
                仍然是客户端send一次data，服务端select一次后，recv一次data。如果每次都把data放入队列queue，当要处理data时，从队列queue中
                取出一个数据后，得判断data是命令还是文件内容。
                第一次这样处理：取出一个data，是命令则记录，不是命令则找出原先记录的命令信息，打开文件，追加写入这次取出的data，关闭文件。
                                下一次取出data时，再去找记录的信息，打开文件，追加写入，关闭文件。这样做虽然也能实现并发，但是每处理一个
                                data都得打开、关闭一次文件，效率低。
                最后这样处理的：每recv一次data就判断data，如果是命令放入queue1，反之放入queue2；处理data时，启一个线程，取出queue1里的命
                                令，再从对应的queue2中不断取出数据，写入，直到完毕。

客户端下载文件：下载文件时客户端只需给服务端发送一条命令，接着服务端处理后回复客户端你准备接收文件，然后服务端不断send数据data给客户端，
                服务端在send数据data时，由于是非阻塞状态，可能出现BlockingIOError，所以需要try然后send数据data，如果出现BlockingIOError，
                说明这行data没有发送成功，指针需要回到这行data的行首位置，然后继续send这行data，直到结束。这里我仍然是在服务端启一个线
                程来处理的。

总的来说：1.只用select的话，也能处理多并发，效率比较低，速度很慢（感觉是自己写得复杂了）；
          2.通过select  + 多线程的方法实现并发，速度快多了。
          3.一些个人理解：对于IO密集型：本来CPU性能就特别好，速度光速快，再加上IO操作密集（io不占用CPU），CPU的事就更少。所以程序慢的原因
                          通常都是CPU在等待io的完成，如果不等待，CPU做事是特别快的。这样的话，多核和单核速度应该相差不大，毕竟IO慢才是主
                          要原因。所以，对于IO操作密集型，我在这里用了多线程，每一个线程进入IO等待时，CPU可以处理那些没进入IO操作的线程，
                          充分利用CPU的性能。如果所有线程都进入IO，这时CPU才开始等待，一旦有IO处理完的线程，CPU又可以工作了。

                          对于CPU密集型：假设是科学计算。这个时候CPU要不断运算，事情特别多，CPU虽然很牛逼，做事快，也忙不过来。这个时候多核
                          的性能肯定比单核好，因为CPU可以把事情分给别的CPU，大家共同来完成。

                          关键点：io不占用CPU。


3 流程图
见day10/目录下的两个.png文件

4 程序测试
4.1 测试环境：
操作系统：win10；      python解释器版本：Python3.5.2

4.2 测试步骤：
（1）启动服务端  ：运行Server/bin/下的  SelectFtp.py
（2）启动客户端1  ：运行Client/bin/下的  SelectClient.py
（3）启动客户端2：重复步骤（2）即可
（4）上传：
        1.将需要上传的文件 test1.avi、test2.avi 拷贝到Client/bin目录下
        2.在客户端1中输入命令：put test1.avi ,在客户端2中输入命令put test2.avi，尽量同时执行（按回车即可执行）
        3.等待上传完成后，查看Server/bin目录下已有有测试文件test1.avi 、test2.avi
（5）下载：
        1.下载前确保Server/bin目录下有测试文件test1.avi 、test2.avi（如已经执行步骤（4），该目录下已有文件）
        2.删除Client/bin目录下的 test1.avi 、test2.avi
        3.客户端1、2中分别输入命令:get test1.avi  、 get test2.avi,尽量同时执行
        4.等待下载完成后，查看Client/bin目录下已经有 test1.avi 、test2.avi
（6）测试完成后，关闭程序即可


5  目录结构

5.1 服务端目录结构
Server/
|-- bin/
|   |-- __init__.py
|   |-- SelectClient.py   执行程序
|
|-- core/                 核心代码
|   |-- __init__.py
|   |-- main.py           主程序
|
|-- README

5.2 客户端目录结构
Client/
|-- bin/
|   |-- __init__.py
|   |-- SelectFtp.py     执行程序
|
|-- core/                核心代码
|   |-- __init__.py
|   |-- main.py          主程序
|
|-- README

6 备注信息
    如有问题，联系QQ......


程序名称：文件上传下载系统
作者：nb

1 博客地址
http://www.cnblogs.com......

2 需求
（1）用select()实现FTP的上传下载功能
（2）满足多个客户端同时上传或下载（并发）

需求仔细分析：
客户端上传文件：由于客户端不断send数据，每send一次，服务端就会select一次，然后recv一次。客户端第一次send的肯定是put filename这样的命令，
                准确说是一个包含命令、文件名、文件大小等信息的字典；接着等待服务端响应说可以传文件后，客户端开始不断send文件的数据。这里
                仍然是客户端send一次data，服务端select一次后，recv一次data。如果每次都把data放入队列queue，当要处理data时，从队列queue中
                取出一个数据后，得判断data是命令还是文件内容。
                第一次这样处理：取出一个data，是命令则记录，不是命令则找出原先记录的命令信息，打开文件，追加写入这次取出的data，关闭文件。
                                下一次取出data时，再去找记录的信息，打开文件，追加写入，关闭文件。这样做虽然也能实现并发，但是每处理一个
                                data都得打开、关闭一次文件，效率低。
                最后这样处理的：每recv一次data就判断data，如果是命令放入queue1，反之放入queue2；处理data时，启一个线程，取出queue1里的命
                                令，再从对应的queue2中不断取出数据，写入，直到完毕。

客户端下载文件：下载文件时客户端只需给服务端发送一条命令，接着服务端处理后回复客户端你准备接收文件，然后服务端不断send数据data给客户端，
                服务端在send数据data时，由于是非阻塞状态，可能出现BlockingIOError，所以需要try然后send数据data，如果出现BlockingIOError，
                说明这行data没有发送成功，指针需要回到这行data的行首位置，然后继续send这行data，直到结束。这里我仍然是在服务端启一个线
                程来处理的。

总的来说：1.只用select的话，也能处理多并发，效率比较低，速度很慢（感觉是自己写得复杂了）；
          2.通过select  + 多线程的方法实现并发，速度快多了。
          3.一些个人理解：对于IO密集型：本来CPU性能就特别好，速度光速快，再加上IO操作密集（io不占用CPU），CPU的事就更少。所以程序慢的原因
                          通常都是CPU在等待io的完成，如果不等待，CPU做事是特别快的。这样的话，多核和单核速度应该相差不大，毕竟IO慢才是主
                          要原因。所以，对于IO操作密集型，我在这里用了多线程，每一个线程进入IO等待时，CPU可以处理那些没进入IO操作的线程，
                          充分利用CPU的性能。如果所有线程都进入IO，这时CPU才开始等待，一旦有IO处理完的线程，CPU又可以工作了。

                          对于CPU密集型：假设是科学计算。这个时候CPU要不断运算，事情特别多，CPU虽然很牛逼，做事快，也忙不过来。这个时候多核
                          的性能肯定比单核好，因为CPU可以把事情分给别的CPU，大家共同来完成。

                          关键点：io不占用CPU。


3 流程图
见day10/目录下的两个.png文件

4 程序测试
4.1 测试环境：
操作系统：win10；      python解释器版本：Python3.5.2

4.2 测试步骤：
（1）启动服务端  ：运行Server/bin/下的  SelectFtp.py
（2）启动客户端1  ：运行Client/bin/下的  SelectClient.py
（3）启动客户端2：重复步骤（2）即可
（4）上传：
        1.将需要上传的文件 test1.avi、test2.avi 拷贝到Client/bin目录下
        2.在客户端1中输入命令：put test1.avi ,在客户端2中输入命令put test2.avi，尽量同时执行（按回车即可执行）
        3.等待上传完成后，查看Server/bin目录下已有有测试文件test1.avi 、test2.avi
（5）下载：
        1.下载前确保Server/bin目录下有测试文件test1.avi 、test2.avi（如已经执行步骤（4），该目录下已有文件）
        2.删除Client/bin目录下的 test1.avi 、test2.avi
        3.客户端1、2中分别输入命令:get test1.avi  、 get test2.avi,尽量同时执行
        4.等待下载完成后，查看Client/bin目录下已经有 test1.avi 、test2.avi
（6）测试完成后，关闭程序即可


5  目录结构

5.1 服务端目录结构
Server/
|-- bin/
|   |-- __init__.py
|   |-- SelectClient.py   执行程序
|
|-- core/                 核心代码
|   |-- __init__.py
|   |-- main.py           主程序
|
|-- README

5.2 客户端目录结构
Client/
|-- bin/
|   |-- __init__.py
|   |-- SelectFtp.py     执行程序
|
|-- core/                核心代码
|   |-- __init__.py
|   |-- main.py          主程序
|
|-- README

6 备注信息
    如有问题，联系QQ......


